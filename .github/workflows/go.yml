# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.5'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

    - name: Run tests with coverage
      run: |
        go test ./... -coverprofile=coverage.out -covermode=atomic
        go tool cover -func=coverage.out -o coverage.txt
        go tool cover -html=coverage.out -o coverage.html
    - name: Generate Coverage Badge
      run: |
        COVERAGE=$(go tool cover -func=cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo $COVERAGE
        COLOR="orange"
        if (( $(echo "$COVERAGE <= 50" | bc -l) )); then COLOR="red"; elif (( $(echo "$COVERAGE > 80" | bc -l) )); then COLOR="green"; fi
        echo COLOR
        curl "https://img.shields.io/badge/coverage-$COVERAGE%25-$COLOR" > images/badge.svg

    - name: Commit badge
      run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git pull origin main
          mkdir -p badges
          mv badge.svg images/coverage.svg
          git add images/coverage.svg
          git commit -m "chore: update coverage badge" || echo "No changes to commit"
          git push origin main

    - name: Publish badge to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        publish_branch: gh-pages
        keep_files: true
        destination_dir: .


   
    - name: Check if coverage is at least 80%
      run: |
        total=$(go tool cover -func=coverage/coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Total coverage: $total%"
        threshold=80.0
        result=$(echo "$total >= $threshold" | bc)
        if [ "$result" -ne 1 ]; then
          echo "Coverage below threshold ($threshold%)"
          exit 1
        fi